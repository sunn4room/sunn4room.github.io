(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{675:function(t,s,a){"use strict";a.r(s);var e=a(52),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redis-学习笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-学习笔记"}},[t._v("#")]),t._v(" Redis 学习笔记")]),t._v(" "),a("p",[t._v("Redis 是一个开源的分布式的基于内存的高性能 k - v 数据库")]),t._v(" "),a("ul",[a("li",[t._v("value 有五种数据结构 string、hash、list、set、sorted set")]),t._v(" "),a("li",[t._v("支持事务、集群部署、数据持久化、订阅/发布、原子性操作等特性")]),t._v(" "),a("li",[t._v("Redis 使用 C 语言开发，可运行在 Linux、BSD、OS X 等。")])]),t._v(" "),a("h2",{attrs:{id:"redis-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-配置"}},[t._v("#")]),t._v(" Redis 配置")]),t._v(" "),a("div",{staticClass:"language-ini extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# redis.conf")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 密码")]),t._v("\nrequirepass xxx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 端口")]),t._v("\nport 6379\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 限制来访ip")]),t._v("\nbind 192.168.1.100 10.0.0.1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 客户端闲置秒数上限")]),t._v("\ntimeout 0\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# debug -> verbose -> notice -> warning")]),t._v("\nloglevel notice\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RDB自动持久化(注意是触发 bgsave 命令)")]),t._v("\nsave 900 1\nsave 300 10\nsave 60 10000\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭RDB自动持久化")]),t._v('\nsave ""\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RDB文件名")]),t._v("\ndbfilename dump.rdb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否开启增量持久化（可能导致持久化文件过大）")]),t._v("\nappendonly no\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# AOP文件名")]),t._v("\nappendfilename appendonly.aof\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增量持久化频率")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# always   不缓冲")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# everysec 每一秒清空缓冲")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# no       缓冲满后再清空")]),t._v("\nappendfsync everysec\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rewrite期间是否可以fsync")]),t._v("\nno-appendfsync-on-rewrite no\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程")]),t._v("\nauto-aof-rewrite-percentage 100\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rewrite最小限制")]),t._v("\nauto-aof-rewrite-min-size 64mb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 持久化路径")]),t._v("\ndir ./\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置主redis地址和端口")]),t._v("\nreplicaof x.x.x.x 6379\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 主redis密码")]),t._v("\nmasterauth xxx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从连不上主时，是否处理请求")]),t._v("\nreplica-serve-stale-data yes\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接数上限")]),t._v("\nmaxclients 100\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1k => 1000 bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1kb => 1024 bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1m => 1000000 bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1mb => 1024*1024 bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1g => 1000000000 bytes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1gb => 1024*1024*1024 bytes")]),t._v("\nmaxmemory 2mb\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 内存满后的数据淘汰策略")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# volatile-lru     只对设置了过期时间的key进行LRU")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# allkeys-lru      LRU")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# volatile-lfu     只对设置了过期时间的key进行LFU")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# allkeys-lfu      LFU")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# volatile-random  随机删除即将过期key")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# allkeys-random   随机删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# volatile-ttl     删除即将过期的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# noeviction       永不过期，返回错误")]),t._v("\nmaxmemory-policy noeviction\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启集群功能")]),t._v("\ncluster-enabled yes\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 集群通信超时毫秒数")]),t._v("\ncluster-node-timeout 15000\n")])])]),a("h2",{attrs:{id:"命令行客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行客户端"}},[t._v("#")]),t._v(" 命令行客户端")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ redis-server /path/to/redis.conf\n")])])]),a("blockquote",[a("p",[t._v("配置项也可以通过命令行传递，例如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ redis-server --port "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6380")]),t._v(" --slaveof "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v("\n")])])]),a("p",[t._v("在运行期可以通过 "),a("code",[t._v("CONFIG SET")]),t._v(" 来修改部分配置项，"),a("code",[t._v("CONFIG GET")]),t._v(" 查看配置项")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("redis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" config get *\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" config get *max-*-entries*\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" config get port\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" save "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"900 1 300 10"')]),t._v("\n")])])])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ redis-cli -h "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1 -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(" -a ***\n")])])]),a("h3",{attrs:{id:"key-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-命令"}},[t._v("#")]),t._v(" key 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("DEL key\nEXISTS key\nEXPIRE key seconds\nKEYS pattern\nMOVE key db\nPERSIST key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除过期时间")]),t._v("\nTTL key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 剩余过期时间")]),t._v("\nRENAME key newkey\nRENAMENX key newkey\nTYPE key\n")])])]),a("h3",{attrs:{id:"string-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-命令"}},[t._v("#")]),t._v(" String 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("SET key value\nSETNX key value\nSETEX key seconds value\nSETRANGE key offset value\nGET key\nMGET key1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nGETBIT key offset\nGETRANGE key start end\nGETSET key value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将给定 key 的值设为 value ，并返回 key 的旧值")]),t._v("\nSTRLEN key\nINCR key\nDECR key\nAPPEND key value\n")])])]),a("blockquote",[a("p",[t._v("string 类型是二进制安全的，最大 512M")])]),t._v(" "),a("blockquote",[a("p",[t._v("string 类型是其他类型的基础")])]),t._v(" "),a("h3",{attrs:{id:"hash-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-命令"}},[t._v("#")]),t._v(" Hash 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("HSET key field value\nHSETNX key field value\nHGET key field\nHGETALL key\nHVALS key\nHDEL key field2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("field2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nHEXISTS key field\nHKEYS key\nHVALS key\nHLEN key\nHSETNX key field value\n")])])]),a("h3",{attrs:{id:"list-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-命令"}},[t._v("#")]),t._v(" List 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("LPUSH key value\nLPUSHX key value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当且仅当 key 存在并且是一个列表")]),t._v("\nRPUSH key value\nRPUSHX key value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 当且仅当 key 存在并且是一个列表")]),t._v("\nLSET key index value\nLPOP key\nRPOP key\nBLPOP key "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\nBRPOP key "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeout")]),t._v("\nLINDEX key index\nLRANGE key start stop\nLREM key count value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据参数 count 的值，移除列表中与参数 value 相等的元素")]),t._v("\nLTRIM key start stop "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修剪")]),t._v("\nLLEN key\n")])])]),a("h3",{attrs:{id:"set-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-命令"}},[t._v("#")]),t._v(" Set 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("SADD key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nSMEMBERS key\nSISMEMBER key member\nSMOVE "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" destination member\nSREM key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nSRANDMEMBER key\nSPOP key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除并返回集合中的一个随机元素")]),t._v("\nSCARD key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 元素数量")]),t._v("\nSDIFF key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一个集合与后面所有集合的差集")]),t._v("\nSDIFFSTORE destination key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nSINTER key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有集合的交集")]),t._v("\nSINTERSTORE destination key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nSUNION key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有集合的并集")]),t._v("\nSUNIONSTORE destination key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"sortedset-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sortedset-命令"}},[t._v("#")]),t._v(" SortedSet 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ZADD key score member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("score member"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("score member"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZSCORE key member\nZRANGE key start stop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZREVRANGE key start stop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZRANGEBYSCORE key min max "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT offset count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZREVRANGEBYSCORE key max min "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHSCORES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LIMIT offset count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZRANK key member\nZREVRANK key member\nZREM key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZREMRANGEBYRANK key start stop\nZREMRANGEBYSCORE key min max\nZINCRBY key increment member "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为有序集 key 的成员 member 的 score 值加上增量 increment")]),t._v("\nZCARD key "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 元素数量")]),t._v("\nZCOUNT key min max\nZUNIONSTORE destination numkeys key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WEIGHTS weight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AGGREGATE SUM"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MIN"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nZINTERSTORE destination numkeys key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WEIGHTS weight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("weight "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("AGGREGATE SUM"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MIN"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"pub-sub-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pub-sub-命令"}},[t._v("#")]),t._v(" Pub/Sub 命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("PUBLISH channel message\nSUBSCRIBE channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nPSUBSCRIBE pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nUNSUBSCRIBE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nPUNSUBSCRIBE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"事务命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务命令"}},[t._v("#")]),t._v(" 事务命令")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("MULTI "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标记一个事务块的开始")]),t._v("\nWATCH key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监视指定key，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断")]),t._v("\nUNWATCH "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消 WATCH 命令对所有 key 的监视")]),t._v("\nDISCARD "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消事务")]),t._v("\nEXEC "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开始执行")]),t._v("\n")])])]),a("h2",{attrs:{id:"redis-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-持久化"}},[t._v("#")]),t._v(" Redis 持久化")]),t._v(" "),a("h3",{attrs:{id:"rdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rdb"}},[t._v("#")]),t._v(" RDB")]),t._v(" "),a("p",[t._v("RDB 是把当前内存中的数据集快照写入磁盘。")]),t._v(" "),a("h4",{attrs:{id:"备份"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份"}},[t._v("#")]),t._v(" 备份")]),t._v(" "),a("ul",[a("li",[t._v("自动触发：在配置文件中 "),a("code",[t._v("save <duration> <changed-keys-count>")])]),t._v(" "),a("li",[t._v("手动触发："),a("code",[t._v("SAVE")]),t._v(" 阻塞 "),a("code",[t._v("BGSAVE")]),t._v(" 非阻塞（fork）")])]),t._v(" "),a("h4",{attrs:{id:"恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复"}},[t._v("#")]),t._v(" 恢复")]),t._v(" "),a("p",[t._v("只需要在备份路径上有快照文件即可被加载恢复，注意这里的恢复是阻塞的。")]),t._v(" "),a("h3",{attrs:{id:"aof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aof"}},[t._v("#")]),t._v(" AOF")]),t._v(" "),a("p",[t._v("AOF 则是通过保存Redis服务器所执行的写命令来记录数据库状态。")]),t._v(" "),a("h4",{attrs:{id:"备份-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备份-2"}},[t._v("#")]),t._v(" 备份")]),t._v(" "),a("p",[t._v("为了提高性能，设置了 AOF 缓冲区，满足一定条件后才进行 AOF，")]),t._v(" "),a("p",[t._v("时间长了，AOF 文件可能会过大，因此引入 rewrite 机制：直接读取服务器现有的键值对，然后用一条命令去代替之前记录这个键值对的多条命令，生成一个新的文件后去替换原来的 AOF 文件。这个处理是在子进程中进行的，非阻塞。")]),t._v(" "),a("h4",{attrs:{id:"恢复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复-2"}},[t._v("#")]),t._v(" 恢复")]),t._v(" "),a("p",[t._v("当开启 AOF 后，将采用 AOF 恢复数据而不是 RDB")]),t._v(" "),a("h2",{attrs:{id:"redis-集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-集群"}},[t._v("#")]),t._v(" Redis 集群")]),t._v(" "),a("h3",{attrs:{id:"主从复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主从复制"}},[t._v("#")]),t._v(" 主从复制")]),t._v(" "),a("h4",{attrs:{id:"全量同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全量同步"}},[t._v("#")]),t._v(" 全量同步")]),t._v(" "),a("p",[t._v("发生在Slave初始化阶段")]),t._v(" "),a("ol",[a("li",[t._v("从服务器连接主服务器，发送SYNC命令；")]),t._v(" "),a("li",[t._v("主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB文件并使用缓冲区记录此后执行的所有写命令；")]),t._v(" "),a("li",[t._v("主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；")]),t._v(" "),a("li",[t._v("从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；")]),t._v(" "),a("li",[t._v("主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；")]),t._v(" "),a("li",[t._v("从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；")])]),t._v(" "),a("h4",{attrs:{id:"增量同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增量同步"}},[t._v("#")]),t._v(" 增量同步")]),t._v(" "),a("p",[t._v("Redis增量复制是指Slave初始化后开始正常工作时主服务器发生的写操作同步到从服务器的过程。增量复制的过程主要是主服务器每执行一个写命令就会向从服务器发送相同的写命令，从服务器接收并执行收到的写命令。")]),t._v(" "),a("h4",{attrs:{id:"延迟问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟问题"}},[t._v("#")]),t._v(" 延迟问题")]),t._v(" "),a("h3",{attrs:{id:"哨兵监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哨兵监控"}},[t._v("#")]),t._v(" 哨兵监控")]),t._v(" "),a("h3",{attrs:{id:"槽位分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#槽位分配"}},[t._v("#")]),t._v(" 槽位分配")]),t._v(" "),a("p",[t._v("redis 为了适应更高的并发要求，引入“槽位”的概念：预先安排了序号为 0-16383 的槽位，并分配给多个节点，每个数据都会通过 hash 函数计算出一个槽位序号，并存储都对应的节点上。")]),t._v(" "),a("h4",{attrs:{id:"初始化流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化流程"}},[t._v("#")]),t._v(" 初始化流程")]),t._v(" "),a("h4",{attrs:{id:"新增节点流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新增节点流程"}},[t._v("#")]),t._v(" 新增节点流程")]),t._v(" "),a("h4",{attrs:{id:"删除节点流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除节点流程"}},[t._v("#")]),t._v(" 删除节点流程")]),t._v(" "),a("h2",{attrs:{id:"redis-内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-内存管理"}},[t._v("#")]),t._v(" Redis 内存管理")]),t._v(" "),a("h3",{attrs:{id:"过期策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过期策略"}},[t._v("#")]),t._v(" 过期策略")]),t._v(" "),a("ul",[a("li",[t._v("惰性删除：所有键读写命令执行之前都会调用 expireIfNeeded 函数对其进行检查，如果过期，则删除该键，然后执行键不存在的操作；未过期则不作操作，继续执行原有的命令")]),t._v(" "),a("li",[t._v("定期删除：都从一定数量的数据库中取出一定数量的随机键进行检查，并删除其中的过期键")])]),t._v(" "),a("h3",{attrs:{id:"删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除策略"}},[t._v("#")]),t._v(" 删除策略")]),t._v(" "),a("ul",[a("li",[t._v("volatile-lru  利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )")]),t._v(" "),a("li",[t._v("allkeys-lru  利用LRU算法移除任何key （和上一个相比，删除的key包括设置过期时间和不设置过期时间的）。"),a("strong",[t._v("通常使用该方式")])]),t._v(" "),a("li",[t._v("volatile-random 移除设置过过期时间的随机key")]),t._v(" "),a("li",[t._v("allkeys-random 无差别的随机移除。")]),t._v(" "),a("li",[t._v("volatile-ttl  移除即将过期的key(minor TTL)")]),t._v(" "),a("li",[t._v("noeviction 不移除任何key，只是返回一个写错误 ，"),a("strong",[t._v("默认选项")])])]),t._v(" "),a("h2",{attrs:{id:"redis-线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-线程模型"}},[t._v("#")]),t._v(" Redis 线程模型")]),t._v(" "),a("p",[t._v("Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案。")]),t._v(" "),a("ul",[a("li",[t._v("内存操作本身就非常快")]),t._v(" "),a("li",[t._v("采用哈希构造数据，查找复杂度 O(1)")]),t._v(" "),a("li",[t._v("避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗")]),t._v(" "),a("li",[t._v("使用多路I/O复用模型")])]),t._v(" "),a("blockquote",[a("p",[t._v("为了充分发挥多核 CPU 的性能优势，可以启动多个 Redis 实例。")])]),t._v(" "),a("h2",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),a("h3",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),a("h4",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[t._v("#")]),t._v(" 缓存击穿")]),t._v(" "),a("p",[t._v("Redis中一个热点key在失效的同时，大量的请求过来，从而会全部到达数据库，压垮数据库。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("设置热点数据永不过期")]),t._v("：对于某个需要频繁获取的信息，缓存在Redis中，并设置其永不过期。当然这种方式比较粗暴，对于某些业务场景是不适合的。")]),t._v(" "),a("li",[a("strong",[t._v("定时更新")]),t._v("：比如这个热点数据的过期时间是1h，那么每到59minutes时，通过定时任务去更新这个热点key，并重新设置其过期时间。")]),t._v(" "),a("li",[a("strong",[t._v("互斥锁")]),t._v("：在Redis中根据key获得的value值为空时，先锁上，然后从数据库加载，加载完毕，释放锁。若其他线程也在请求该key时，发现获取锁失败，则睡眠一段时间（比如100ms）后重试。")])]),t._v(" "),a("h4",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[t._v("#")]),t._v(" 缓存穿透")]),t._v(" "),a("p",[t._v("缓存和数据库中都没有的数据，可用户还是源源不断的发起请求，导致每次请求都会到数据库，从而压垮数据库。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("业务层校验")]),t._v("：用户发过来的请求，根据请求参数进行校验，对于明显错误的参数，直接拦截返回。")]),t._v(" "),a("li",[a("strong",[t._v("不存在数据设置短过期时间")]),t._v("：对于某个查询为空的数据，可以将这个空结果进行Redis缓存，但是设置很短的过期时间，比如30s。")]),t._v(" "),a("li",[a("strong",[t._v("布隆过滤器")]),t._v("：对于缓存击穿，我们可以将查询的数据条件都哈希到一个足够大的布隆过滤器中，用户发送的请求会先被布隆过滤器拦截，一定不存在的数据就直接拦截返回了，从而避免下一步对数据库的压力。")])]),t._v(" "),a("h4",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[t._v("#")]),t._v(" 缓存雪崩")]),t._v(" "),a("p",[t._v("Redis中缓存的数据大面积同时失效，或者Redis宕机，从而会导致大量请求直接到数据库，压垮数据库。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("设置有效期均匀分布")]),t._v("：避免缓存设置相近的有效期，我们可以在设置有效期时增加随机值。")]),t._v(" "),a("li",[a("strong",[t._v("数据预热")]),t._v("：对于即将来临的大量请求，我们可以提前走一遍系统，将数据提前缓存在Redis中，并设置不同的过期时间。")])]),t._v(" "),a("h4",{attrs:{id:"缓存更新策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存更新策略"}},[t._v("#")]),t._v(" 缓存更新策略")]),t._v(" "),a("p",[t._v("删缓存 - 更新数据库 - 删缓存")]),t._v(" "),a("h3",{attrs:{id:"分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),a("h3",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),a("h3",{attrs:{id:"布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器"}},[t._v("#")]),t._v(" 布隆过滤器")]),t._v(" "),a("p",[t._v("redis 可以用来实现布隆过滤器，即一种可以判断大量数据 “一定不存在和可能存在” 的数据结构")]),t._v(" "),a("h2",{attrs:{id:"java-客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-客户端"}},[t._v("#")]),t._v(" Java 客户端")]),t._v(" "),a("h3",{attrs:{id:"jedis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jedis"}},[t._v("#")]),t._v(" Jedis")]),t._v(" "),a("h3",{attrs:{id:"spring-data-redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-redis"}},[t._v("#")]),t._v(" Spring Data Redis")]),t._v(" "),a("h2",{attrs:{id:"go-客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go-客户端"}},[t._v("#")]),t._v(" Go 客户端")])])}),[],!1,null,null,null);s.default=n.exports}}]);